from pydantic import BaseModel, Field
from typing import Optional, Literal

class InputReasoner(BaseModel):
    id: str
    taskId: Optional[str] = None
    language: Optional[str] = None
    text: str

class OutputReasoner(BaseModel):
    """Output model for reasoner processing results."""
    id: str
    message: str
    ai_generated: bool
    ai_hashtags: list[str]
    ai_hashtags_native: list[str]
    authentication: str
    call_flags: Optional[str]
    call_reason: str
    call_triggers: str
    call_triggers_native: str
    caller_authentication: str
    category: str
    client_lifecycle_event: str
    entry_point: str
    further_sentiment: dict[str, str]  # Contains SENTIMENT_ADVICE, SENTIMENT_FEEDBACK, SENTIMENT_SERVICE
    hashtags: list[str]
    live_help: str
    product: list[str]
    product_cluster: str
    resolution: dict[str, str]  # Contains CALLBACK, CALL_TRANSFER, CONTACT_BRANCH
    resolution_flag: str
    self_service: dict[str, str]  # Contains SELF_SERVICE_GUIDANCE, SELF_SERVICE_MENTION, SELF_SERVICE_USAGE
    sentiment: str
    speaker: dict[str, str]  # Contains "Speaker 1", "Speaker 2"
    subtopics: str
    summary: str
    summary_native: str


class Speaker(BaseModel):
    speaker_1: Literal["Agent", "Client"] = Field(
        description="Identifies whether Speaker 1 is an Agent or Client."
    )
    speaker_2: Literal["Agent", "Client"] = Field(
        description="Identifies whether Speaker 2 is an Agent or Client."
    )


class SelfServiceFlag(BaseModel):
    self_service_guidance: Literal["Yes", "No"] = Field(
        description="Indicates whether the client was given guidance on how to use self service on website or digital banking"
    )
    self_service_mention: Literal["Yes", "No"] = Field(
        description="Indicates whether the client was mentioned using self service on website or digital banking"
    )
    self_service_usage: Literal["Yes", "No"] = Field(
        description="Indicates whether the client used self service on website or digital banking"
    )


class FurtherSentiment(BaseModel):
    sentiment_advice: Literal["Positive", "Negative", "Neutral"] = Field(
        description="Indicates the sentiment of the advice given by the agent to the client to solve their problem"
    )
    sentiment_feedback: Literal["Positive", "Negative", "Neutral"] = Field(
        description="Indicates the sentiment of the feedback given by the client to the agent to solve their problem"
    )
    sentiment_service: Literal["Positive", "Negative", "Neutral"] = Field(
        description="Indicates the sentiment of the service given by the agent to the client to solve their problem"
    )


class ResolutionFlag(BaseModel):
    call_transfer: Literal["Yes", "No"] = Field(
        description="Indicates whether the call was transferred to another agent"
    )
    contact_branch: Literal["Yes", "No"] = Field(
        description="Indicates whether the client was introduced to go to the UBS branch"
    )
    callback: Literal["Yes", "No"] = Field(
        description="Indicates whether the client was given a callback to solve their problem"
    )


class ReasonerProcessingResponse(BaseModel):
    """Pydantic model for validating OpenAI call transcript processing responses."""
    ai_generated: bool = Field(
        description="Indicates whether the response was generated by AI"
    )
    ai_hashtags: list[str] = Field(
        description="List of hashtags generated by AI"
    )
    ai_hashtags_native: list[str] = Field(
        description="List of hashtags generated by AI in the native language of the transcript"
    )
    authentication: Literal["Yes", "No"] = Field(
        description="Indicates whether the caller was authenticated or not"
    )
    call_flags: Literal["EXTERN", "WEBSITE"] = Field(
        description="Indicates if the client tried to resolve the issue externally or on the UBS website"
    )
    call_reason: str = Field(
        description="Indicates the reason for the call"
    )
    call_triggers: str = Field(
        description="Short, one sentence summary of the customer's reason for calling WITHOUT mentioning any PII or CID"
    )
    call_triggers_native: str = Field(
        description="Short, one sentence summary of the customer's reason for calling in the native language of the transcript WITHOUT mentioning any PII or CID"
    )
    caller_authentication: Literal["ACCESS_APP_AUTO", "ACCESS_APP_MANUAL", "SECURITY_QUESTIONS", "NO_AUTHENTICATION"] = Field(
        description="Indicates the authentication method used to identify the caller:\n"
                    "- ACCESS_APP_AUTO: The caller was automatically authenticated using the UBS Access app\n"
                    "- ACCESS_APP_MANUAL: The caller was manually authenticated using the UBS Access app\n"
                    "- SECURITY_QUESTIONS: The caller was authenticated using security questions\n"
                    "- NO_AUTHENTICATION: The caller was not authenticated\n"
    )
    category: str = Field(
        description="Indicates the category of the call from the list of categories provided\n"
    )
    client_lifecycle_event: Literal["MOVE_TO_SWITZERLAND",
                                    "MOVE_ABROAD",
                                    "SCHOLARS_STUDENT",
                                    "CAREER_STARTER",
                                    "WORKING_LIFE",
                                    "STARTING_BUSINESS",
                                    "INVESTMENT_WEALTH_PLANNING",
                                    "GETTING_MARRIED",
                                    "KIDS",
                                    "BUYING_HOME",
                                    "DIVORCE_SEPARATION",
                                    "ELDERLY_CARE",
                                    "PENSION_RETIREMENT",
                                    "DEATH_INHERITANCE",
                                    "NOT_MENTIONED"
                                    ] = Field(
        description="Indicates the client lifecycle event:\n"
                    "- MOVE_TO_SWITZERLAND: The caller was calling about moving to Switzerland\n"
                    "- MOVE_ABROAD: The caller was calling about moving abroad\n"
                    "- SCHOLARS_STUDENT: The caller was calling about scholars and students\n"
                    "- CAREER_STARTER: The caller was calling about career starters\n"
                    "- WORKING_LIFE: The caller was calling about working life\n"
                    "- STARTING_BUSINESS: The caller was calling about starting a business\n"
                    "- INVESTMENT_WEALTH_PLANNING: The caller was calling about investment and wealth planning\n"
                    "- GETTING_MARRIED: The caller was calling about getting married\n"
                    "- KIDS: The caller was calling about kids\n"
                    "- BUYING_HOME: The caller was calling about buying a home\n"
                    "- DIVORCE_SEPARATION: The caller was calling about divorce or separation\n"
                    "- ELDERLY_CARE: The caller was calling about elderly care\n"
                    "- PENSION_RETIREMENT: The caller was calling about pension or retirement\n"
                    "- DEATH_INHERITANCE: The caller was calling about death and inheritance\n"
                    "- NOT_MENTIONED: No client lifecycle event was mentioned\n"
    )
    product: str = Field(
        description="Indicates the product of the call"
    )
    product_cluster: str = Field(
        description="Indicates the product cluster of the call"
    )
    entry_point: Literal["Mobile Banking",
                         "E-Banking",
                         "ubs.com",
                         "KeyClub eStore",
                         "Virtual Assistan",
                         "Search",
                         "Not mentioned"] = Field(
        description="Indicates the entry point for the call\n"
                    "- Mobile Banking: The caller was using the UBS mobile banking app\n"
                    "- E-Banking: The caller was using the UBS e-banking\n"
                    "- ubs.com: The caller was using the UBS website\n"
                    "- KeyClub eStore: The caller was using the UBS KeyClub eStore\n"
                    "- Virtual Assistant: The caller was using the UBS virtual assistant\n"
                    "- Search: The caller was using the UBS search\n"
                    "- Not mentioned: No entry point was mentioned\n"
    )
    hashtags: list[str] = Field(
        description="List of hashtags related to the call"
    )
    live_help: Literal["Yes", "No"] = Field(
        description="Indicates if the screen sharing was used to help the client"
    )
    further_sentiment: FurtherSentiment
    product: list[str] = Field(
        description="List of products mentioned in the call"
    )
    product_cluster: str = Field(
        description="Indicates the product cluster of the call"
    )
    resolution: ResolutionFlag
    resolution_flag: Literal["CLIENT MANAGER", "BRANCH", "SELF SERVICE", "RESOLVED", "OTHER"] = Field(
        description=(
            "Identifies the resolution scenario that best describes the transcript outcome:\n"
            "- CLIENT MANAGER: The client is redirected to another client manager\n"
            "- BRANCH: The client was introduced to go to the UBS branch\n"
            "- SELF SERVICE: The client was introduced to go to the UBS website or mobile app\n"
            "- RESOLVED: The client's problem is resolved with no further action needed\n"
            "- OTHER: Any other scenario not covered by the above options"
        )
    )
    self_service: SelfServiceFlag
    sentiment: Literal["positive", "negative", "neutral"] = Field(
        description="Indicates the overall sentiment of the call"
    )
    speaker: Speaker
    subtopics: str = Field(
        description="Subtopic related to the call"
    )
    summary: str = Field(
        description="Detailed summary of the call transcript WITHOUT mentioning any PII or CID"
    )
    summary_native: str = Field(
        description="Detailed summary of the call transcript in the native language WITHOUT mentioning any PII or CID"
    )
